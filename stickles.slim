initialize() {
 defineConstant("L", 1e8); // 1e6 for testing - 1e8 for actual run
 initializeTreeSeq(); // ancestry tracking
 initializeMutationRate(0);
 initializeMutationType("m1", 0.5, "f", 0.1);
 
// p1 marker
 initializeMutationType("m2", 0.5, "f", 0.0); 
 initializeMutationType("m3", 0.5, "f", 0.0); 
 initializeMutationType("m4", 0.5, "f", 0.0); 
 initializeMutationType("m5", 0.5, "f", 0.0); 
 initializeMutationType("m6", 0.5, "f", 0.0); 
 initializeMutationType("m7", 0.5, "f", 0.0); 
 initializeMutationType("m8", 0.5, "f", 0.0); 
 initializeMutationType("m9", 0.5, "f", 0.0); 
 initializeMutationType("m10", 0.5, "f", 0.0); 
 initializeMutationType("m11", 0.5, "f", 0.0); 
 initializeMutationType("m12", 0.5, "f", 0.0);
 initializeMutationType("m13", 0.5, "f", 0.0);
 initializeMutationType("m14", 0.5, "f", 0.0);
 initializeMutationType("m15", 0.5, "f", 0.0);
 initializeMutationType("m16", 0.5, "f", 0.0);
 initializeMutationType("m17", 0.5, "f", 0.0);
 initializeMutationType("m18", 0.5, "f", 0.0);
 initializeMutationType("m19", 0.5, "f", 0.0);
 initializeMutationType("m20", 0.5, "f", 0.0);
 initializeMutationType("m21", 0.5, "f", 0.0);
 initializeMutationType("m22", 0.5, "f", 0.0);
 initializeMutationType("m23", 0.5, "f", 0.0);
 initializeMutationType("m24", 0.5, "f", 0.0);
 initializeMutationType("m25", 0.5, "f", 0.0);
 
// p2 marker
 initializeMutationType("m26", 0.5, "f", 0.0); 
 initializeMutationType("m27", 0.5, "f", 0.0); 
 initializeMutationType("m28", 0.5, "f", 0.0); 
 initializeMutationType("m29", 0.5, "f", 0.0); 
 initializeMutationType("m30", 0.5, "f", 0.0); 
 initializeMutationType("m31", 0.5, "f", 0.0); 
 initializeMutationType("m32", 0.5, "f", 0.0);
 initializeMutationType("m33", 0.5, "f", 0.0);
 initializeMutationType("m34", 0.5, "f", 0.0);
 initializeMutationType("m35", 0.5, "f", 0.0);
 initializeMutationType("m36", 0.5, "f", 0.0);
 initializeMutationType("m37", 0.5, "f", 0.0);
 initializeMutationType("m38", 0.5, "f", 0.0);
 initializeMutationType("m39", 0.5, "f", 0.0);
 initializeMutationType("m40", 0.5, "f", 0.0);
 initializeMutationType("m41", 0.5, "f", 0.0);
 initializeMutationType("m42", 0.5, "f", 0.0);
 initializeMutationType("m43", 0.5, "f", 0.0);
 initializeMutationType("m44", 0.5, "f", 0.0);
 initializeMutationType("m45", 0.5, "f", 0.0);
 initializeMutationType("m46", 0.5, "f", 0.0);
 initializeMutationType("m47", 0.5, "f", 0.0);
 initializeMutationType("m48", 0.5, "f", 0.0);
 initializeMutationType("m49", 0.5, "f", 0.0);

// p3 marker
 initializeMutationType("m50", 0.5, "f", 0.0); 
 initializeMutationType("m51", 0.5, "f", 0.0); 
 initializeMutationType("m52", 0.5, "f", 0.0); 
 initializeMutationType("m53", 0.5, "f", 0.0); 
 initializeMutationType("m54", 0.5, "f", 0.0); 
 initializeMutationType("m55", 0.5, "f", 0.0); 
 initializeMutationType("m56", 0.5, "f", 0.0); 
 initializeMutationType("m57", 0.5, "f", 0.0); 
 initializeMutationType("m58", 0.5, "f", 0.0); 
 initializeMutationType("m59", 0.5, "f", 0.0); 
 initializeMutationType("m60", 0.5, "f", 0.0); 
 initializeMutationType("m61", 0.5, "f", 0.0); 
 initializeMutationType("m62", 0.5, "f", 0.0);
 initializeMutationType("m63", 0.5, "f", 0.0);
 initializeMutationType("m64", 0.5, "f", 0.0);
 initializeMutationType("m65", 0.5, "f", 0.0);
 initializeMutationType("m66", 0.5, "f", 0.0);
 initializeMutationType("m67", 0.5, "f", 0.0);
 initializeMutationType("m68", 0.5, "f", 0.0);
 initializeMutationType("m69", 0.5, "f", 0.0);
 initializeMutationType("m70", 0.5, "f", 0.0);
 initializeMutationType("m71", 0.5, "f", 0.0);
 initializeMutationType("m72", 0.5, "f", 0.0);
 initializeMutationType("m73", 0.5, "f", 0.0);

// p4 marker
 initializeMutationType("m74", 0.5, "f", 0.0); 
 initializeMutationType("m75", 0.5, "f", 0.0); 
 initializeMutationType("m76", 0.5, "f", 0.0); 
 initializeMutationType("m77", 0.5, "f", 0.0); 
 initializeMutationType("m78", 0.5, "f", 0.0); 
 initializeMutationType("m79", 0.5, "f", 0.0); 
 initializeMutationType("m80", 0.5, "f", 0.0); 
 initializeMutationType("m81", 0.5, "f", 0.0); 
 initializeMutationType("m82", 0.5, "f", 0.0);
 initializeMutationType("m83", 0.5, "f", 0.0);
 initializeMutationType("m84", 0.5, "f", 0.0);
 initializeMutationType("m85", 0.5, "f", 0.0);
 initializeMutationType("m86", 0.5, "f", 0.0);
 initializeMutationType("m87", 0.5, "f", 0.0);
 initializeMutationType("m88", 0.5, "f", 0.0);
 initializeMutationType("m89", 0.5, "f", 0.0);
 initializeMutationType("m90", 0.5, "f", 0.0);
 initializeMutationType("m91", 0.5, "f", 0.0);
 initializeMutationType("m92", 0.5, "f", 0.0);
 initializeMutationType("m93", 0.5, "f", 0.0);
 initializeMutationType("m94", 0.5, "f", 0.0);
 initializeMutationType("m95", 0.5, "f", 0.0);
 initializeMutationType("m96", 0.5, "f", 0.0);
 initializeMutationType("m97", 0.5, "f", 0.0);
 
 
 // no substitution when reaching fixation 
 m2.convertToSubstitution = F;
 m3.convertToSubstitution = F;
 m4.convertToSubstitution = F;
 m5.convertToSubstitution = F;
 m6.convertToSubstitution = F;
 m7.convertToSubstitution = F;
 m8.convertToSubstitution = F;
 m9.convertToSubstitution = F;
 m10.convertToSubstitution = F;
 m11.convertToSubstitution = F;
 m12.convertToSubstitution = F;
 m13.convertToSubstitution = F;
 m14.convertToSubstitution = F;
 m15.convertToSubstitution = F;
 m16.convertToSubstitution = F;
 m17.convertToSubstitution = F;
 m18.convertToSubstitution = F;
 m19.convertToSubstitution = F;
 m20.convertToSubstitution = F;
 m21.convertToSubstitution = F;
 m22.convertToSubstitution = F;
 m23.convertToSubstitution = F;
 m24.convertToSubstitution = F;
 m25.convertToSubstitution = F;
 m26.convertToSubstitution = F;
 m27.convertToSubstitution = F;
 m28.convertToSubstitution = F;
 m29.convertToSubstitution = F;
 m30.convertToSubstitution = F;
 m31.convertToSubstitution = F;
 m32.convertToSubstitution = F;
 m33.convertToSubstitution = F;
 m34.convertToSubstitution = F;
 m35.convertToSubstitution = F;
 m36.convertToSubstitution = F;
 m37.convertToSubstitution = F;
 m38.convertToSubstitution = F;
 m39.convertToSubstitution = F;
 m40.convertToSubstitution = F;
 m41.convertToSubstitution = F;
 m52.convertToSubstitution = F;
 m53.convertToSubstitution = F;
 m54.convertToSubstitution = F;
 m55.convertToSubstitution = F;
 m56.convertToSubstitution = F;
 m57.convertToSubstitution = F;
 m58.convertToSubstitution = F;
 m59.convertToSubstitution = F;
 m60.convertToSubstitution = F;
 m61.convertToSubstitution = F;
 m62.convertToSubstitution = F;
 m63.convertToSubstitution = F;
 m64.convertToSubstitution = F;
 m65.convertToSubstitution = F;
 m66.convertToSubstitution = F;
 m67.convertToSubstitution = F;
 m68.convertToSubstitution = F;
 m69.convertToSubstitution = F;
 m70.convertToSubstitution = F;
 m71.convertToSubstitution = F;
 m72.convertToSubstitution = F;
 m73.convertToSubstitution = F;
 m74.convertToSubstitution = F;
 m75.convertToSubstitution = F;
 m76.convertToSubstitution = F;
 m77.convertToSubstitution = F;
 m78.convertToSubstitution = F;
 m79.convertToSubstitution = F;
 m80.convertToSubstitution = F;
 m81.convertToSubstitution = F;
 m82.convertToSubstitution = F;
 m83.convertToSubstitution = F;
 m84.convertToSubstitution = F;
 m85.convertToSubstitution = F;
 m86.convertToSubstitution = F;
 m87.convertToSubstitution = F;
 m88.convertToSubstitution = F;
 m89.convertToSubstitution = F;
 m90.convertToSubstitution = F;
 m91.convertToSubstitution = F;
 m92.convertToSubstitution = F;
 m93.convertToSubstitution = F;
 m94.convertToSubstitution = F;
 m95.convertToSubstitution = F;
 m96.convertToSubstitution = F;
 m97.convertToSubstitution = F;
 initializeGenomicElementType("g1", m1, 1.0);
 initializeGenomicElement(g1, 0, L-1);
 initializeRecombinationRate(1e-8);
}

// 4 source population
1 late() {
sim.addSubpop("p1", 1000);
sim.addSubpop("p2", 1000);
sim.addSubpop("p3", 1000);
sim.addSubpop("p4", 1000);

// introduce tracker mutation/SNP

sample(p1.genomes, 850).addNewDrawnMutation(m2, asInteger(L * 0.00));
sample(p1.genomes, 850).addNewDrawnMutation(m3, asInteger(L * 0.15));
sample(p1.genomes, 850).addNewDrawnMutation(m4, asInteger(L * 0.20));
sample(p1.genomes, 850).addNewDrawnMutation(m5, asInteger(L * 0.25));
sample(p1.genomes, 850).addNewDrawnMutation(m6, asInteger(L * 0.30));
sample(p1.genomes, 850).addNewDrawnMutation(m7, asInteger(L * 0.35));
sample(p1.genomes, 850).addNewDrawnMutation(m8, asInteger(L * 0.40));
sample(p1.genomes, 850).addNewDrawnMutation(m9, asInteger(L * 0.45));
sample(p1.genomes, 850).addNewDrawnMutation(m10, asInteger(L * 0.50));
sample(p1.genomes, 850).addNewDrawnMutation(m11, asInteger(L * 0.55));
sample(p1.genomes, 850).addNewDrawnMutation(m12, asInteger(L * 0.60));
sample(p1.genomes, 850).addNewDrawnMutation(m13, asInteger(L * 0.65));
sample(p1.genomes, 850).addNewDrawnMutation(m14, asInteger(L * 0.70));
sample(p1.genomes, 850).addNewDrawnMutation(m15, asInteger(L * 0.75));
sample(p1.genomes, 850).addNewDrawnMutation(m16, asInteger(L * 0.80));
sample(p1.genomes, 850).addNewDrawnMutation(m17, asInteger(L * 0.85));
sample(p1.genomes, 850).addNewDrawnMutation(m18, asInteger(L * 0.90));
sample(p1.genomes, 850).addNewDrawnMutation(m19, asInteger(L * 0.95));
sample(p1.genomes, 850).addNewDrawnMutation(m20, asInteger(L * 0.99));
sample(p1.genomes, 850).addNewDrawnMutation(m21, asInteger(L * 0.04));
sample(p1.genomes, 850).addNewDrawnMutation(m22, asInteger(L * 0.10));
sample(p1.genomes, 850).addNewDrawnMutation(m23, asInteger(L * 0.05));
sample(p1.genomes, 850).addNewDrawnMutation(m24, asInteger(L * 0.09));
sample(p1.genomes, 850).addNewDrawnMutation(m25, asInteger(L * 0.14));

sample(p2.genomes, 850).addNewDrawnMutation(m26, asInteger(L * 0.01));
sample(p2.genomes, 850).addNewDrawnMutation(m27, asInteger(L * 0.06));
sample(p2.genomes, 850).addNewDrawnMutation(m28, asInteger(L * 0.11));
sample(p2.genomes, 850).addNewDrawnMutation(m29, asInteger(L * 0.16));
sample(p2.genomes, 850).addNewDrawnMutation(m30, asInteger(L * 0.21));
sample(p2.genomes, 850).addNewDrawnMutation(m31, asInteger(L * 0.26));
sample(p2.genomes, 850).addNewDrawnMutation(m32, asInteger(L * 0.31));
sample(p2.genomes, 850).addNewDrawnMutation(m33, asInteger(L * 0.36));
sample(p2.genomes, 850).addNewDrawnMutation(m34, asInteger(L * 0.41));
sample(p2.genomes, 850).addNewDrawnMutation(m35, asInteger(L * 0.46));
sample(p2.genomes, 850).addNewDrawnMutation(m36, asInteger(L * 0.51));
sample(p2.genomes, 850).addNewDrawnMutation(m37, asInteger(L * 0.56));
sample(p2.genomes, 850).addNewDrawnMutation(m38, asInteger(L * 0.61));
sample(p2.genomes, 850).addNewDrawnMutation(m39, asInteger(L * 0.66));
sample(p2.genomes, 850).addNewDrawnMutation(m40, asInteger(L * 0.71));
sample(p2.genomes, 850).addNewDrawnMutation(m41, asInteger(L * 0.76));
sample(p2.genomes, 850).addNewDrawnMutation(m42, asInteger(L * 0.81));
sample(p2.genomes, 850).addNewDrawnMutation(m43, asInteger(L * 0.86));
sample(p2.genomes, 850).addNewDrawnMutation(m44, asInteger(L * 0.91));
sample(p2.genomes, 850).addNewDrawnMutation(m45, asInteger(L * 0.96));
sample(p2.genomes, 850).addNewDrawnMutation(m46, asInteger(L * 0.19));
sample(p2.genomes, 850).addNewDrawnMutation(m47, asInteger(L * 0.24));
sample(p2.genomes, 850).addNewDrawnMutation(m48, asInteger(L * 0.29));
sample(p2.genomes, 850).addNewDrawnMutation(m49, asInteger(L * 0.34));

sample(p3.genomes, 850).addNewDrawnMutation(m50, asInteger(L * 0.02));
sample(p3.genomes, 850).addNewDrawnMutation(m51, asInteger(L * 0.07));
sample(p3.genomes, 850).addNewDrawnMutation(m52, asInteger(L * 0.12));
sample(p3.genomes, 850).addNewDrawnMutation(m53, asInteger(L * 0.17));
sample(p3.genomes, 850).addNewDrawnMutation(m54, asInteger(L * 0.22));
sample(p3.genomes, 850).addNewDrawnMutation(m55, asInteger(L * 0.27));
sample(p3.genomes, 850).addNewDrawnMutation(m56, asInteger(L * 0.32));
sample(p3.genomes, 850).addNewDrawnMutation(m57, asInteger(L * 0.37));
sample(p3.genomes, 850).addNewDrawnMutation(m58, asInteger(L * 0.42));
sample(p3.genomes, 850).addNewDrawnMutation(m59, asInteger(L * 0.47));
sample(p3.genomes, 850).addNewDrawnMutation(m60, asInteger(L * 0.52));
sample(p3.genomes, 850).addNewDrawnMutation(m61, asInteger(L * 0.57));
sample(p3.genomes, 850).addNewDrawnMutation(m62, asInteger(L * 0.62));
sample(p3.genomes, 850).addNewDrawnMutation(m63, asInteger(L * 0.67));
sample(p3.genomes, 850).addNewDrawnMutation(m64, asInteger(L * 0.72));
sample(p3.genomes, 850).addNewDrawnMutation(m65, asInteger(L * 0.77));
sample(p3.genomes, 850).addNewDrawnMutation(m66, asInteger(L * 0.82));
sample(p3.genomes, 850).addNewDrawnMutation(m67, asInteger(L * 0.87));
sample(p3.genomes, 850).addNewDrawnMutation(m68, asInteger(L * 0.92));
sample(p3.genomes, 850).addNewDrawnMutation(m69, asInteger(L * 0.97));
sample(p3.genomes, 850).addNewDrawnMutation(m70, asInteger(L * 0.39));
sample(p3.genomes, 850).addNewDrawnMutation(m71, asInteger(L * 0.44));
sample(p3.genomes, 850).addNewDrawnMutation(m72, asInteger(L * 0.49));
sample(p3.genomes, 850).addNewDrawnMutation(m73, asInteger(L * 0.54));

sample(p4.genomes, 850).addNewDrawnMutation(m74, asInteger(L * 0.03));
sample(p4.genomes, 850).addNewDrawnMutation(m75, asInteger(L * 0.08));
sample(p4.genomes, 850).addNewDrawnMutation(m76, asInteger(L * 0.13));
sample(p4.genomes, 850).addNewDrawnMutation(m77, asInteger(L * 0.18));
sample(p4.genomes, 850).addNewDrawnMutation(m78, asInteger(L * 0.23));
sample(p4.genomes, 850).addNewDrawnMutation(m79, asInteger(L * 0.28));
sample(p4.genomes, 850).addNewDrawnMutation(m80, asInteger(L * 0.33));
sample(p4.genomes, 850).addNewDrawnMutation(m81, asInteger(L * 0.38));
sample(p4.genomes, 850).addNewDrawnMutation(m82, asInteger(L * 0.43));
sample(p4.genomes, 850).addNewDrawnMutation(m83, asInteger(L * 0.48));
sample(p4.genomes, 850).addNewDrawnMutation(m84, asInteger(L * 0.53));
sample(p4.genomes, 850).addNewDrawnMutation(m85, asInteger(L * 0.58));
sample(p4.genomes, 850).addNewDrawnMutation(m86, asInteger(L * 0.63));
sample(p4.genomes, 850).addNewDrawnMutation(m87, asInteger(L * 0.68));
sample(p4.genomes, 850).addNewDrawnMutation(m88, asInteger(L * 0.73));
sample(p4.genomes, 850).addNewDrawnMutation(m89, asInteger(L * 0.78));
sample(p4.genomes, 850).addNewDrawnMutation(m90, asInteger(L * 0.83));
sample(p4.genomes, 850).addNewDrawnMutation(m91, asInteger(L * 0.88));
sample(p4.genomes, 850).addNewDrawnMutation(m92, asInteger(L * 0.93));
sample(p4.genomes, 850).addNewDrawnMutation(m93, asInteger(L * 0.98));
sample(p4.genomes, 850).addNewDrawnMutation(m94, asInteger(L * 0.59));
sample(p4.genomes, 850).addNewDrawnMutation(m95, asInteger(L * 0.64));
sample(p4.genomes, 850).addNewDrawnMutation(m96, asInteger(L * 0.69));
sample(p4.genomes, 850).addNewDrawnMutation(m97, asInteger(L * 0.74));


sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); // ancestry tracking


sim.addSubpop("p5", 1000); // add merged population
p5.setMigrationRates(c(p1, p2, p3, p4), c(0.25, 0.25, 0.25, 0.25)); // introduce individuals from source population into merged population
}

2 late() {
p5.setMigrationRates(c(p1, p2, p3, p4), c(0.0, 0.0, 0.0, 0.0)); // stop adding individuals into merged population
// remove source populations
p1.setSubpopulationSize(0);
p2.setSubpopulationSize(0);
p3.setSubpopulationSize(0);
p4.setSubpopulationSize(0);

}

7 late() {
 sim.treeSeqOutput("E:/git/SLiM_stickles/output/sticklebacks.trees");
 
  p5g = p5.genomes;

 p1Total = sum(p5g.countOfMutationsOfType(m2)) + sum(p5g.countOfMutationsOfType(m3)) + sum(p5g.countOfMutationsOfType(m4)) + sum(p5g.countOfMutationsOfType(m5)) + sum(p5g.countOfMutationsOfType(m6)) + sum(p5g.countOfMutationsOfType(m7)) + sum(p5g.countOfMutationsOfType(m8)) + sum(p5g.countOfMutationsOfType(m9)) + sum(p5g.countOfMutationsOfType(m10)) + sum(p5g.countOfMutationsOfType(m11)) + sum(p5g.countOfMutationsOfType(m12)) + sum(p5g.countOfMutationsOfType(m13)) + sum(p5g.countOfMutationsOfType(m14)) + sum(p5g.countOfMutationsOfType(m15)) + sum(p5g.countOfMutationsOfType(m16)) + sum(p5g.countOfMutationsOfType(m17)) + sum(p5g.countOfMutationsOfType(m18)) + sum(p5g.countOfMutationsOfType(m19)) + sum(p5g.countOfMutationsOfType(m20)) + sum(p5g.countOfMutationsOfType(m21)) + sum(p5g.countOfMutationsOfType(m22)) + sum(p5g.countOfMutationsOfType(m23)) + sum(p5g.countOfMutationsOfType(m24)) + sum(p5g.countOfMutationsOfType(m25));

 p2Total = sum(p5g.countOfMutationsOfType(m26)) + sum(p5g.countOfMutationsOfType(m27)) + sum(p5g.countOfMutationsOfType(m28)) + sum(p5g.countOfMutationsOfType(m29)) + sum(p5g.countOfMutationsOfType(m30)) + sum(p5g.countOfMutationsOfType(m31)) + sum(p5g.countOfMutationsOfType(m32)) + sum(p5g.countOfMutationsOfType(m33)) + sum(p5g.countOfMutationsOfType(m34)) + sum(p5g.countOfMutationsOfType(m35)) + sum(p5g.countOfMutationsOfType(m36)) + sum(p5g.countOfMutationsOfType(m37)) + sum(p5g.countOfMutationsOfType(m38)) + sum(p5g.countOfMutationsOfType(m39)) + sum(p5g.countOfMutationsOfType(m40)) + sum(p5g.countOfMutationsOfType(m41)) + sum(p5g.countOfMutationsOfType(m42)) + sum(p5g.countOfMutationsOfType(m43)) + sum(p5g.countOfMutationsOfType(m44)) + sum(p5g.countOfMutationsOfType(m45)) + sum(p5g.countOfMutationsOfType(m46)) + sum(p5g.countOfMutationsOfType(m47)) + sum(p5g.countOfMutationsOfType(m48)) + sum(p5g.countOfMutationsOfType(m49));
 
 p3Total = sum(p5g.countOfMutationsOfType(m50)) + sum(p5g.countOfMutationsOfType(m51)) + sum(p5g.countOfMutationsOfType(m52)) + sum(p5g.countOfMutationsOfType(m53)) + sum(p5g.countOfMutationsOfType(m54)) + sum(p5g.countOfMutationsOfType(m55)) + sum(p5g.countOfMutationsOfType(m56)) + sum(p5g.countOfMutationsOfType(m57)) + sum(p5g.countOfMutationsOfType(m58)) + sum(p5g.countOfMutationsOfType(m59)) + sum(p5g.countOfMutationsOfType(m60)) + sum(p5g.countOfMutationsOfType(m61)) + sum(p5g.countOfMutationsOfType(m62)) + sum(p5g.countOfMutationsOfType(m63)) + sum(p5g.countOfMutationsOfType(m64)) + sum(p5g.countOfMutationsOfType(m65)) + sum(p5g.countOfMutationsOfType(m66)) + sum(p5g.countOfMutationsOfType(m67)) + sum(p5g.countOfMutationsOfType(m68)) + sum(p5g.countOfMutationsOfType(m69)) + sum(p5g.countOfMutationsOfType(m70)) + sum(p5g.countOfMutationsOfType(m71)) + sum(p5g.countOfMutationsOfType(m72)) + sum(p5g.countOfMutationsOfType(m73));
 
 p4Total = sum(p5g.countOfMutationsOfType(m74)) + sum(p5g.countOfMutationsOfType(m75)) + sum(p5g.countOfMutationsOfType(m7)) + sum(p5g.countOfMutationsOfType(m77)) + sum(p5g.countOfMutationsOfType(m78)) + sum(p5g.countOfMutationsOfType(m79)) + sum(p5g.countOfMutationsOfType(m80)) + sum(p5g.countOfMutationsOfType(m81)) + sum(p5g.countOfMutationsOfType(m82)) + sum(p5g.countOfMutationsOfType(m83)) + sum(p5g.countOfMutationsOfType(m84)) + sum(p5g.countOfMutationsOfType(m85)) + sum(p5g.countOfMutationsOfType(m86)) + sum(p5g.countOfMutationsOfType(m87)) + sum(p5g.countOfMutationsOfType(m88)) + sum(p5g.countOfMutationsOfType(m89)) + sum(p5g.countOfMutationsOfType(m90)) + sum(p5g.countOfMutationsOfType(m91)) + sum(p5g.countOfMutationsOfType(m92)) + sum(p5g.countOfMutationsOfType(m93)) + sum(p5g.countOfMutationsOfType(m94)) + sum(p5g.countOfMutationsOfType(m95)) + sum(p5g.countOfMutationsOfType(m96)) + sum(p5g.countOfMutationsOfType(m97));
 
 maxTotal = p1Total + p2Total + p3Total + p4Total;
 p1TotalFraction = p1Total / maxTotal;
 catn("Fraction with p1 ancestry: " + p1TotalFraction);
 p2TotalFraction = p2Total / maxTotal;
 catn("Fraction with p2 ancestry: " + p2TotalFraction);
 p3TotalFraction = p3Total / maxTotal;
 catn("Fraction with p3 ancestry: " + p3TotalFraction);
 p4TotalFraction = p4Total / maxTotal;
 catn("Fraction with p4 ancestry: " + p4TotalFraction);


for (i in p5.individuals)
 	{
 		TrueAnTot = i.countOfMutationsOfType(m2) + i.countOfMutationsOfType(m3) + i.countOfMutationsOfType(m4) + i.countOfMutationsOfType(m5) + i.countOfMutationsOfType(m6) + i.countOfMutationsOfType(m7) + i.countOfMutationsOfType(m8) + i.countOfMutationsOfType(m9) + i.countOfMutationsOfType(m10) + i.countOfMutationsOfType(m11) + i.countOfMutationsOfType(m12) + i.countOfMutationsOfType(m13) + i.countOfMutationsOfType(m14) + i.countOfMutationsOfType(m15) + i.countOfMutationsOfType(m16) + i.countOfMutationsOfType(m17) + i.countOfMutationsOfType(m18) + i.countOfMutationsOfType(m19) + i.countOfMutationsOfType(m20) + i.countOfMutationsOfType(m21) + i.countOfMutationsOfType(m22) + i.countOfMutationsOfType(m23) + i.countOfMutationsOfType(m24) + i.countOfMutationsOfType(m25) + i.countOfMutationsOfType(m26) + i.countOfMutationsOfType(m27) + i.countOfMutationsOfType(m28) + i.countOfMutationsOfType(m29) + i.countOfMutationsOfType(m30) + i.countOfMutationsOfType(m31) + i.countOfMutationsOfType(m32) + i.countOfMutationsOfType(m33) + i.countOfMutationsOfType(m34) + i.countOfMutationsOfType(m35) + i.countOfMutationsOfType(m36) + i.countOfMutationsOfType(m37) + i.countOfMutationsOfType(m38) + i.countOfMutationsOfType(m39) + i.countOfMutationsOfType(m40) + i.countOfMutationsOfType(m41) + i.countOfMutationsOfType(m42) + i.countOfMutationsOfType(m43) + i.countOfMutationsOfType(m44) + i.countOfMutationsOfType(m45) + i.countOfMutationsOfType(m46) + i.countOfMutationsOfType(m47) + i.countOfMutationsOfType(m48) + i.countOfMutationsOfType(m49) + i.countOfMutationsOfType(m50) + i.countOfMutationsOfType(m51) + i.countOfMutationsOfType(m52) + i.countOfMutationsOfType(m53) + i.countOfMutationsOfType(m54) + i.countOfMutationsOfType(m55) + i.countOfMutationsOfType(m56) + i.countOfMutationsOfType(m57) + i.countOfMutationsOfType(m58) + i.countOfMutationsOfType(m59) + i.countOfMutationsOfType(m60) + i.countOfMutationsOfType(m61) + i.countOfMutationsOfType(m62) + i.countOfMutationsOfType(m63) + i.countOfMutationsOfType(m64) + i.countOfMutationsOfType(m65) + i.countOfMutationsOfType(m66) + i.countOfMutationsOfType(m67) + i.countOfMutationsOfType(m68) + i.countOfMutationsOfType(m69) + i.countOfMutationsOfType(m70) + i.countOfMutationsOfType(m71) + i.countOfMutationsOfType(m72) + i.countOfMutationsOfType(m73) + i.countOfMutationsOfType(m74) + i.countOfMutationsOfType(m75) + i.countOfMutationsOfType(m76) + i.countOfMutationsOfType(m77) + i.countOfMutationsOfType(m78) + i.countOfMutationsOfType(m79) + i.countOfMutationsOfType(m80) + i.countOfMutationsOfType(m81) + i.countOfMutationsOfType(m82) + i.countOfMutationsOfType(m83) + i.countOfMutationsOfType(m84) + i.countOfMutationsOfType(m85) + i.countOfMutationsOfType(m86) + i.countOfMutationsOfType(m87) + i.countOfMutationsOfType(m88) + i.countOfMutationsOfType(m89) + i.countOfMutationsOfType(m90) + i.countOfMutationsOfType(m91) + i.countOfMutationsOfType(m92) + i.countOfMutationsOfType(m93) + i.countOfMutationsOfType(m94) + i.countOfMutationsOfType(m95) + i.countOfMutationsOfType(m96) + i.countOfMutationsOfType(m97);


		p1TrueAn = i.countOfMutationsOfType(m2) + i.countOfMutationsOfType(m3) + i.countOfMutationsOfType(m4) + i.countOfMutationsOfType(m5) + i.countOfMutationsOfType(m6) + i.countOfMutationsOfType(m7) + i.countOfMutationsOfType(m8) + i.countOfMutationsOfType(m9) + i.countOfMutationsOfType(m10) + i.countOfMutationsOfType(m11) + i.countOfMutationsOfType(m12) + i.countOfMutationsOfType(m13) + i.countOfMutationsOfType(m14) + i.countOfMutationsOfType(m15) + i.countOfMutationsOfType(m16) + i.countOfMutationsOfType(m17) + i.countOfMutationsOfType(m18) + i.countOfMutationsOfType(m19) + i.countOfMutationsOfType(m20) + i.countOfMutationsOfType(m21) + i.countOfMutationsOfType(m22) + i.countOfMutationsOfType(m23) + i.countOfMutationsOfType(m24) + i.countOfMutationsOfType(m25);
		p1TrueAnFrac = p1TrueAn / TrueAnTot;
		
		p2TrueAn = i.countOfMutationsOfType(m26) + i.countOfMutationsOfType(m27) + i.countOfMutationsOfType(m28) + i.countOfMutationsOfType(m29) + i.countOfMutationsOfType(m30) + i.countOfMutationsOfType(m31) + i.countOfMutationsOfType(m32) + i.countOfMutationsOfType(m33) + i.countOfMutationsOfType(m34) + i.countOfMutationsOfType(m35) + i.countOfMutationsOfType(m36) + i.countOfMutationsOfType(m37) + i.countOfMutationsOfType(m38) + i.countOfMutationsOfType(m39) + i.countOfMutationsOfType(m40) + i.countOfMutationsOfType(m41) + i.countOfMutationsOfType(m42) + i.countOfMutationsOfType(m43) + i.countOfMutationsOfType(m44) + i.countOfMutationsOfType(m45) + i.countOfMutationsOfType(m46) + i.countOfMutationsOfType(m47) + i.countOfMutationsOfType(m48) + i.countOfMutationsOfType(m49);
		p2TrueAnFrac = p2TrueAn / TrueAnTot;

		p3TrueAn = i.countOfMutationsOfType(m50) + i.countOfMutationsOfType(m51) + i.countOfMutationsOfType(m52) + i.countOfMutationsOfType(m53) + i.countOfMutationsOfType(m54) + i.countOfMutationsOfType(m55) + i.countOfMutationsOfType(m56) + i.countOfMutationsOfType(m57) + i.countOfMutationsOfType(m58) + i.countOfMutationsOfType(m59) + i.countOfMutationsOfType(m60) + i.countOfMutationsOfType(m61) + i.countOfMutationsOfType(m62) + i.countOfMutationsOfType(m63) + i.countOfMutationsOfType(m64) + i.countOfMutationsOfType(m65) + i.countOfMutationsOfType(m66) + i.countOfMutationsOfType(m67) + i.countOfMutationsOfType(m68) + i.countOfMutationsOfType(m69) + i.countOfMutationsOfType(m70) + i.countOfMutationsOfType(m71) + i.countOfMutationsOfType(m72) + i.countOfMutationsOfType(m73);
		p3TrueAnFrac = p3TrueAn / TrueAnTot;
		
		p4TrueAn = i.countOfMutationsOfType(m74) + i.countOfMutationsOfType(m75) + i.countOfMutationsOfType(m76) + i.countOfMutationsOfType(m77) + i.countOfMutationsOfType(m78) + i.countOfMutationsOfType(m79) + i.countOfMutationsOfType(m80) + i.countOfMutationsOfType(m81) + i.countOfMutationsOfType(m82) + i.countOfMutationsOfType(m83) + i.countOfMutationsOfType(m84) + i.countOfMutationsOfType(m85) + i.countOfMutationsOfType(m86) + i.countOfMutationsOfType(m87) + i.countOfMutationsOfType(m88) + i.countOfMutationsOfType(m89) + i.countOfMutationsOfType(m90) + i.countOfMutationsOfType(m91) + i.countOfMutationsOfType(m92) + i.countOfMutationsOfType(m93) + i.countOfMutationsOfType(m94) + i.countOfMutationsOfType(m95) + i.countOfMutationsOfType(m96) + i.countOfMutationsOfType(m97);
		p4TrueAnFrac = p4TrueAn / TrueAnTot;
		
		catn(p1TrueAnFrac	+ "	" + p2TrueAnFrac + "	" + p3TrueAnFrac + "	" + p4TrueAnFrac);

		line = paste(p1TrueAnFrac, p2TrueAnFrac, p3TrueAnFrac, p4TrueAnFrac);
 		writeFile("E:/git/SLiM_stickles/output/log.txt", line, append=T);

	} 
 
 sim.simulationFinished();
} 

// Scenario
// fitness (m1) {
// return 1.25
// {

// Frequency-dependent selection
// fitness(m1) {
// return 1.0 + sim.mutationFrequencies(p1, mut);
// }

// Temporally varying selection
// 20:50 fitness(m1) { return 1.0; }

// Spatially varying selection
// fitness(m2, p5) { return 1/relFitness; } 